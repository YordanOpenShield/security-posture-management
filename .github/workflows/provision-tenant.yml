name: Provision Tenant

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: 'Tenant ID'
        required: true
        default: 'demo'
      refresh_ssh_key:
        type: boolean
        description: 'Refresh SSH key'
        required: false
        default: 'false'
      destroy:
        type: boolean
        description: 'Destroy tenant'
        required: false
        default: 'false'

jobs:
  provision-tenant:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        if: ${{ github.event.inputs.destroy != 'true' }}
        env:
          TF_VAR_hetzner_token: ${{ secrets.HETZNER_TOKEN }}
          TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
          TF_VAR_refresh_ssh_key: ${{ github.event.inputs.refresh_ssh_key || 'false' }}
        run: |
          set -e
          # Build terraform -var arguments conditionally from workflow inputs
          ARGS=("-var" "tenant=${{ github.event.inputs.tenant }}")
          
          # Handle refresh_ssh_key input
          if [ "${{ github.event.inputs.refresh_ssh_key }}" = "true" ]; then
            echo "Refreshing SSH key as requested."
            ARGS+=("-var" "refresh_ssh_key=true")
          fi

          terraform apply "${ARGS[@]}" -auto-approve

      - name: Terraform Destroy
        working-directory: ./terraform
        if: ${{ github.event.inputs.destroy == 'true' }}
        env:
          TF_VAR_hetzner_token: ${{ secrets.HETZNER_TOKEN }}
          TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
        run: |
          set -e
          terraform destroy -var "tenant=${{ github.event.inputs.tenant }}" -auto-approve

      - name: Upload terraform state (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ github.event.inputs.tenant }}
          path: terraform/terraform.tfstate

      - name: Commit Terraform state back to repo
        if: always()
        run: |
          set -e
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH"
          git add terraform/terraform.tfstate
          if git diff --staged --quiet; then
            echo "No state changes to commit"
          else
            git commit -m "chore(terraform): update state for tenant ${{ github.event.inputs.tenant }} [ci skip]"
            git push origin HEAD:$BRANCH
          fi

  # deploy-to-tenant:
  #   needs: provision-infrastructure
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Download terraform state (artifact)
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state-${{ github.event.inputs.tenant }}

  #     - name: Read Terraform outputs into environment
  #       working-directory: ./terraform
  #       id: tfoutputs
  #       run: |
  #         # Required outputs from your terraform: tenant_ip, pg_password, rabbitmq_password, pg_user, pg_db
  #         echo "TENANT_IP=$(terraform output -raw tenant_host)" >> $GITHUB_ENV
  #         echo "PG_PASSWORD=$(terraform output -raw pg_password)" >> $GITHUB_ENV
  #         echo "RABBITMQ_PASSWORD=$(terraform output -raw rabbitmq_password)" >> $GITHUB_ENV
  #         echo "SSH_PRIVATE_KEY=$(terraform output -raw tenant_ssh_private_key)" >> $GITHUB_ENV

  #     - name: Create inventory file for Ansible
  #       working-directory: ./ansible
  #       run: |
  #         mkdir -p inventories
  #         cat > ./inventories/tenant.yml <<EOF
  #         [tenant]
  #         ${{ env.TENANT_IP }} ansible_user=root ansible_ssh_common_args='-o StrictHostKeyChecking=no'
  #         EOF

  #     - name: Start ssh-agent and add 'key'
  #       uses: webfactory/ssh-agent@v0.9.0
  #       with:
  #         ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

  #     - name: Install Ansible
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install ansible-core==2.16.0  # or ansible if you need collections
  #         pip install "ansible[azure]" --no-deps || true
  #       shell: bash

  #     - name: Create extra-vars JSON file (temp)
  #       run: |
  #         cat > ansible_vars.json <<EOF
  #         { "pg_password": "${{ env.PG_PASSWORD }}", "rabbitmq_pass": "${{ env.RABBITMQ_PASSWORD }}" }
  #         EOF
  #         chmod 600 ansible_vars.json

  #     - name: Run Ansible playbook
  #       run: |
  #         ansible-playbook -i ${{ env.ANSIBLE_INVENTORY }} playbooks/site.yml -e "@ansible_vars.json" --ssh-extra-args='-o StrictHostKeyChecking=no'
  #       shell: bash

  #     - name: Cleanup secrets file
  #       if: always()
  #       run: |
  #         shred -u ansible_vars.json || rm -f ansible_vars.json || true
  #       shell: bash