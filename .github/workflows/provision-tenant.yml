name: Provision Tenant
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: 'Tenant id to provision'
        required: true
        default: 'demo'
      destroy:
        description: 'Set to true to destroy the tenant instead of creating/updating it'
        required: false
        default: 'false'
      quota_hard:
        description: 'Optional ResourceQuota map (HCL map syntax) e.g. {"pods"="20","requests.cpu"="4"}'
        required: false
        default: ''
      limit_default:
        description: 'Optional LimitRange default map (HCL map syntax) e.g. {"cpu"="250m","memory"="512Mi"}'
        required: false
        default: ''

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply (create cluster)
        working-directory: ./terraform
        if: ${{ github.event.inputs.destroy != 'true' }}
        env:
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
        run: |
          set -e
          # Build terraform -var arguments conditionally from workflow inputs
          ARGS=("-var" "tenant=${{ github.event.inputs.tenant }}")

          if [ -n "${{ github.event.inputs.quota_hard }}" ]; then
            ARGS+=("-var" "quota_hard=${{ github.event.inputs.quota_hard }}")
          fi

          if [ -n "${{ github.event.inputs.limit_default }}" ]; then
            ARGS+=("-var" "limit_default=${{ github.event.inputs.limit_default }}")
          fi

          terraform apply "${ARGS[@]}" -auto-approve

      - name: Terraform Destroy (destroy cluster)
        working-directory: ./terraform
        if: ${{ github.event.inputs.destroy == 'true' }}
        env:
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
        run: |
          set -e
          terraform destroy -target=module.tenant -var "tenant=${{ github.event.inputs.tenant }}" -auto-approve

      - name: Upload terraform state (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ github.event.inputs.tenant }}
          path: terraform/terraform.tfstate


      - name: Commit Terraform state back to repo
        if: always()
        run: |
          set -e
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH"
          git add terraform/terraform.tfstate
          if git diff --staged --quiet; then
            echo "No state changes to commit"
          else
            git commit -m "chore(terraform): update state for tenant ${{ github.event.inputs.tenant }} [ci skip]"
            git push origin HEAD:$BRANCH
          fi