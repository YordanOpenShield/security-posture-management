name: Provision Tenant
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: 'Tenant id to provision'
        required: true
        default: 'skip'
      quota_hard:
        description: 'Optional ResourceQuota map (HCL map syntax) e.g. {"pods"="20","requests.cpu"="4"}'
        required: false
        default: ''
      limit_default:
        description: 'Optional LimitRange default map (HCL map syntax) e.g. {"cpu"="250m","memory"="512Mi"}'
        required: false
        default: ''

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply (create cluster)
        working-directory: ./terraform
        if: github.event.inputs.tenant != 'skip'
        env:
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          set -e
          # Build terraform -var arguments conditionally from workflow inputs
          ARGS=("-var" "tenant=${{ github.event.inputs.tenant }}")

          if [ -n "${{ github.event.inputs.quota_hard }}" ]; then
            ARGS+=("-var" "quota_hard=${{ github.event.inputs.quota_hard }}")
          fi

          if [ -n "${{ github.event.inputs.limit_default }}" ]; then
            ARGS+=("-var" "limit_default=${{ github.event.inputs.limit_default }}")
          fi

          terraform apply "${ARGS[@]}" -auto-approve

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        if: always()
        with:
          version: 'latest'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        if: always()
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Save kubeconfig
        if: always()
        run: |
          set -e
          # Capture terraform output and extract a UUID-like cluster id to avoid wrapper/debug noise
          CLUSTER_ID=$(terraform -chdir=terraform output cluster_id 2>/dev/null || true)
          if [ -z "$CLUSTER_ID" ]; then
            echo "Could not parse cluster_id from terraform output:"
            echo "cluster_id: $CLUSTER_ID"
            exit 0
          fi
          echo "Saving kubeconfig for cluster: $CLUSTER_ID"
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

      - name: Install cert-manager
        run: |
          # Install cert-manager using kubectl apply (manifest)
          kubectl apply --validate=false -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml

      - name: Create Let's Encrypt staging ClusterIssuer
        run: |
          cat <<EOF > cluster-issuer-staging.yaml
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-staging
          spec:
            acme:
              server: https://acme-staging-v02.api.letsencrypt.org/directory
              email: admin@example.com
              privateKeySecretRef:
                name: letsencrypt-staging
              solvers:
              - http01:
                  ingress:
                    class: nginx
          EOF
          kubectl apply -f cluster-issuer-staging.yaml

      - name: Install NGINX Ingress Controller
        run: |
          # Install a simple nginx ingress (kubernetes/ingress-nginx) via manifest
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

      - name: Upload terraform state (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ github.event.inputs.tenant }}
          path: terraform/terraform.tfstate


      - name: Commit Terraform state back to repo
        if: always()
        run: |
          set -e
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH"
          git add terraform/terraform.tfstate || true
          if git diff --staged --quiet; then
            echo "No state changes to commit"
          else
            git commit -m "chore(terraform): update state for tenant ${{ github.event.inputs.tenant }} [ci skip]"
            git push origin HEAD:$BRANCH
          fi

  debug:
    runs-on: ubuntu-latest
    needs: [provision]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      - name: Terraform Output (raw cluster_id)
        working-directory: ./terraform
        id: tfout
        run: |
          terraform output -raw cluster_id || true

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Collect cluster debug files
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TENANT: ${{ github.event.inputs.tenant }}
        run: |
          set -euo pipefail
          mkdir -p debug-output
          echo "DEBUG START: $(date)" > debug-output/collected_at.txt

          if [ -z "${DIGITALOCEAN_TOKEN:-}" ]; then
            echo "DIGITALOCEAN_TOKEN missing - aborting debug collection" | tee debug-output/error.txt
            exit 0
          fi

          doctl auth init --access-token "$DIGITALOCEAN_TOKEN"
          doctl account get --format Email,Status --no-header > debug-output/doctl_account.txt || true

          CLUSTER_RAW=$(terraform -chdir=terraform output -raw cluster_id 2>/dev/null || true)
          echo "$CLUSTER_RAW" > debug-output/cluster_id_raw.txt
          CLUSTER_ID=$(echo "$CLUSTER_RAW" | tr -d '\r' | grep -Eo '[0-9a-fA-F-]{36}' | head -n1 || true)
          if [ -z "$CLUSTER_ID" ]; then
            echo "no cluster id parsed; saving raw and exiting" | tee -a debug-output/cluster_id_raw.txt
            tar -czf debug-output.tar.gz -C debug-output . || true
            exit 0
          fi
          echo "$CLUSTER_ID" > debug-output/cluster_id.txt

          doctl kubernetes cluster kubeconfig save "$CLUSTER_ID" --context "do-$CLUSTER_ID" || true

          kubectl config view --minify > debug-output/kubeconfig_minify.yaml || true
          kubectl config current-context > debug-output/current_context.txt || true
          kubectl cluster-info > debug-output/cluster_info.txt 2>&1 || true

          kubectl get nodes -o wide > debug-output/nodes.txt 2>&1 || true
          kubectl describe nodes > debug-output/nodes_describe.txt 2>&1 || true

          NAMESPACE="${TENANT}"
          kubectl get ns "$NAMESPACE" -o yaml > debug-output/namespace_yaml.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get pods -o wide > debug-output/pods.txt 2>&1 || true

          mkdir -p debug-output/pod-details
          for P in $(kubectl -n "$NAMESPACE" get pod -o name --no-headers 2>/dev/null || true); do
            PN=$(basename "$P")
            kubectl -n "$NAMESPACE" describe pod "$PN" > debug-output/pod-details/"$PN".describe.txt 2>&1 || true
            CONTAINERS=$(kubectl -n "$NAMESPACE" get pod "$PN" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null || true)
            for C in $CONTAINERS; do
              kubectl -n "$NAMESPACE" logs "$PN" -c "$C" --tail=500 > debug-output/pod-details/"$PN"."$C".logs.txt 2>&1 || true
              kubectl -n "$NAMESPACE" logs "$PN" -c "$C" --previous --tail=200 > debug-output/pod-details/"$PN"."$C".logs_prev.txt 2>&1 || true
            done
          done

          kubectl -n "$NAMESPACE" get deployments -o wide > debug-output/deployments.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get statefulsets -o wide > debug-output/statefulsets.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get svc -o wide > debug-output/services.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get ing -o wide > debug-output/ingress.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get pvc -o wide > debug-output/pvcs.txt 2>&1 || true
          kubectl -n "$NAMESPACE" describe pvc >> debug-output/pvc_describe.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get events --sort-by=.metadata.creationTimestamp > debug-output/events.txt 2>&1 || true
          kubectl -n "$NAMESPACE" get endpoints -o wide > debug-output/endpoints.txt 2>&1 || true

          kubectl top nodes > debug-output/top_nodes.txt 2>&1 || true
          kubectl -n "$NAMESPACE" top pods > debug-output/top_pods.txt 2>&1 || true

          cp -v terraform/terraform.tfstate debug-output/terraform.tfstate || true

          tar -czf debug-output.tar.gz -C debug-output . || true

      - name: Upload debug-output
        uses: actions/upload-artifact@v4
        with:
          name: debug-output-${{ github.event.inputs.tenant }}
          path: debug-output.tar.gz
