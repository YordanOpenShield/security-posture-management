name: Debug Kubernetes Cluster

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
        env:
          ACTIONS_STEP_DEBUG: false
          ACTIONS_RUNNER_DEBUG: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Save kubeconfig
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          # Capture terraform output and extract a UUID-like cluster id to avoid wrapper/debug noise
          echo "$(terraform -chdir=terraform output cluster_id 2>/dev/null)"
          echo "$(terraform -chdir=terraform output -json cluster_id 2>/dev/null)"
          echo "$(terraform -chdir=terraform output -raw cluster_id 2>/dev/null)"
          echo "$(terraform -chdir=terraform output cluster_id 2>/dev/null | sed 's/\"//g')"
          echo "$(terraform -chdir=terraform output -json cluster_id 2>/dev/null | sed 's/\"//g')"
          CLUSTER_ID=$(terraform -chdir=terraform output -raw cluster_id)
          doctl auth init --access-token "$DIGITALOCEAN_TOKEN"
          echo "Saving kubeconfig for cluster: $CLUSTER_ID"
          doctl kubernetes cluster kubeconfig save "$CLUSTER_ID"

      - name: Verify kubectl connectivity
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces
          kubectl get svc --all-namespaces
      
      - name: Debug Info
        run: |
          echo "Kubernetes context:"
          kubectl config current-context
          echo "Kubernetes nodes:"
          kubectl get nodes -o wide
          echo "Kubernetes all namespaces pods:"
          kubectl get pods --all-namespaces -o wide
          echo "Kubernetes all namespaces services:"
          kubectl get svc --all-namespaces -o wide
          echo "Kubernetes all namespaces ingresses:"
          kubectl get ing --all-namespaces -o wide
          echo "Kubernetes cert-manager pods (cert-manager namespace):"
          kubectl get pods -n cert-manager -o wide
          echo "Kubernetes ingress-nginx pods (ingress-nginx namespace):"
          kubectl get pods -n ingress-nginx -o wide
          echo "Kubernetes resource quotas (all namespaces):"
          kubectl get resourcequota --all-namespaces
          echo "Kubernetes limit ranges (all namespaces):"
          kubectl get limitrange --all-namespaces