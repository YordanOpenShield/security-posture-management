name: Debug Kubernetes Cluster

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Save kubeconfig
        env:
          ACTIONS_STEP_DEBUG: false
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          # Capture terraform output and extract a UUID-like cluster id to avoid wrapper/debug noise
          CLUSTER_ID=$(terraform -chdir=terraform output -raw cluster_id)
          doctl auth init --access-token "$DIGITALOCEAN_TOKEN"
          echo "Saving kubeconfig for cluster: $CLUSTER_ID"
          doctl kubernetes cluster kubeconfig save "$CLUSTER_ID"

      - name: Verify kubectl connectivity
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces
          kubectl get svc --all-namespaces
      
      - name: Debug Info
        run: |
          echo "Kubernetes context:"
          kubectl config current-context
          echo "Kubernetes nodes:"
          kubectl get nodes -o wide
          echo "Kubernetes all namespaces pods:"
          kubectl get pods --all-namespaces -o wide
          echo "Kubernetes all namespaces services:"
          kubectl get svc --all-namespaces -o wide
          echo "Kubernetes all namespaces ingresses:"
          kubectl get ing --all-namespaces -o wide
          echo "Kubernetes cert-manager pods (cert-manager namespace):"
          kubectl get pods -n cert-manager -o wide
          echo "Kubernetes ingress-nginx pods (ingress-nginx namespace):"
          kubectl get pods -n ingress-nginx -o wide
          echo "Kubernetes resource quotas (all namespaces):"
          kubectl get resourcequota --all-namespaces
          echo "Kubernetes limit ranges (all namespaces):"
          kubectl get limitrange --all-namespaces

          echo "\nKubernetes jobs (all namespaces):"
          kubectl get jobs --all-namespaces -o wide || true

          # If the faraday init job exists, describe it and fetch logs for its pods.
          echo "\nChecking faraday init job (demo/faraday-create-tables)"
          kubectl -n demo get job faraday-create-tables -o yaml || echo "job faraday-create-tables not found"
          echo "\nDescribe faraday-create-tables job (if present):"
          kubectl -n demo describe job faraday-create-tables || true

          echo "\nEvents in the demo namespace (last 100):"
          kubectl -n demo get events --sort-by=.metadata.creationTimestamp || true

          echo "\nJob pods and logs for faraday-create-tables (if any):"
          job_pods=$(kubectl -n demo get pods --selector=job-name=faraday-create-tables -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true)
          if [ -n "$job_pods" ]; then
            for p in $job_pods; do
              echo "--- Pod: $p ---"
              kubectl -n demo describe pod $p || true
              containers=$(kubectl -n demo get pod $p -o jsonpath='{.spec.containers[*].name}' 2>/dev/null || true)
              for c in $containers; do
                echo "--- logs for container: $c ---"
                kubectl -n demo logs $p -c $c --tail=500 || true
              done
            done
          else
            echo "No pods found for job faraday-create-tables"
          fi

          echo
          echo "== Per-pod describe and recent logs (capped) =="
          echo "Collecting describe + logs for up to 50 pods; logs tail=500 lines per container"

          kubectl get pods --all-namespaces --no-headers -o custom-columns=NS:.metadata.namespace,NAME:.metadata.name | head -n 50 | while read -r ns name; do
            echo
            echo "===== POD: $ns/$name ====="
            echo "--- describe ---"
            kubectl describe pod -n "$ns" "$name"
            echo "--- containers and logs (tail 500) ---"
            containers=$(kubectl get pod -n "$ns" "$name" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null)
            for c in $containers; do
              echo "--- logs for container: $c ---"
              kubectl logs -n "$ns" "$name" -c "$c" --tail=500
            done
          done